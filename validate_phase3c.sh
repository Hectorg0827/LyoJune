#!/bin/bash

# PHASE 3C VALIDATION SCRIPT
# Advanced Features Integration - Video Streaming, Real-Time Features & Analytics

echo "üöÄ PHASE 3C VALIDATION: ADVANCED FEATURES INTEGRATION"
echo "=================================================="
echo "Date: $(date)"
echo "Phase: 3C - Advanced Features Integration"
echo ""

# Initialize counters
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# Function to run check
check() {
    local description="$1"
    local command="$2"
    local expected="$3"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if eval "$command" >/dev/null 2>&1; then
        if [ "$expected" = "pass" ]; then
            echo "‚úÖ $description"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
        else
            echo "‚ùå $description"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
        fi
    else
        if [ "$expected" = "fail" ]; then
            echo "‚úÖ $description"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
        else
            echo "‚ùå $description"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
        fi
    fi
}

# Function to check file exists and has content
check_file() {
    local description="$1"
    local file_path="$2"
    local min_lines="$3"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ -f "$file_path" ]; then
        local line_count=$(wc -l < "$file_path")
        if [ "$line_count" -ge "$min_lines" ]; then
            echo "‚úÖ $description (${line_count} lines)"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
        else
            echo "‚ùå $description (only ${line_count} lines, expected ${min_lines}+)"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
        fi
    else
        echo "‚ùå $description (file not found)"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
}

echo "üìÅ DIRECTORY STRUCTURE VALIDATION"
echo "=================================="

# Check core directories
check "Core Media directory exists" "[ -d 'LyoApp/Core/Media' ]" "pass"
check "Core Realtime directory exists" "[ -d 'LyoApp/Core/Realtime' ]" "pass"
check "Core Analytics directory exists" "[ -d 'LyoApp/Core/Analytics' ]" "pass"

echo ""
echo "üé• VIDEO STREAMING SYSTEM VALIDATION"
echo "===================================="

# Video Streaming Manager
check_file "VideoStreamManager.swift exists with substantial content" "LyoApp/Core/Media/VideoStreamManager.swift" 400
check "VideoStreamManager contains adaptive streaming" "grep -q 'AdaptiveStreamingManager' LyoApp/Core/Media/VideoStreamManager.swift" "pass"
check "VideoStreamManager contains stream quality enum" "grep -q 'StreamQuality' LyoApp/Core/Media/VideoStreamManager.swift" "pass"
check "VideoStreamManager contains HLS support" "grep -q 'HLS' LyoApp/Core/Media/VideoStreamManager.swift" "pass"
check "VideoStreamManager contains network monitoring" "grep -q 'NetworkMonitor' LyoApp/Core/Media/VideoStreamManager.swift" "pass"

echo ""
echo "üì± OFFLINE CONTENT MANAGEMENT VALIDATION"
echo "========================================"

# Offline Content Manager
check_file "OfflineContentManager.swift exists with substantial content" "LyoApp/Core/Media/OfflineContentManager.swift" 400
check "OfflineContentManager contains background downloads" "grep -q 'URLSessionDownloadTask' LyoApp/Core/Media/OfflineContentManager.swift" "pass"
check "OfflineContentManager contains download queue" "grep -q 'downloadQueue' LyoApp/Core/Media/OfflineContentManager.swift" "pass"
check "OfflineContentManager contains storage management" "grep -q 'availableStorage' LyoApp/Core/Media/OfflineContentManager.swift" "pass"
check "OfflineContentManager contains metadata persistence" "grep -q 'metadata' LyoApp/Core/Media/OfflineContentManager.swift" "pass"

echo ""
echo "üß† INTELLIGENT MEDIA CACHING VALIDATION"
echo "======================================="

# Media Cache Manager
check_file "MediaCacheManager.swift exists with substantial content" "LyoApp/Core/Media/MediaCacheManager.swift" 300
check "MediaCacheManager contains LRU eviction" "grep -q 'LeastRecentlyUsed\|lastAccessedAt' LyoApp/Core/Media/MediaCacheManager.swift" "pass"
check "MediaCacheManager contains compression" "grep -q 'compress\|compression' LyoApp/Core/Media/MediaCacheManager.swift" "pass"
check "MediaCacheManager contains cache policies" "grep -q 'CachePolicy' LyoApp/Core/Media/MediaCacheManager.swift" "pass"
check "MediaCacheManager contains size limits" "grep -q 'maxCacheSize\|cacheSize' LyoApp/Core/Media/MediaCacheManager.swift" "pass"

echo ""
echo "üåê REAL-TIME COMMUNICATION VALIDATION"
echo "====================================="

# WebSocket Manager
check_file "WebSocketManager.swift exists with substantial content" "LyoApp/Core/Realtime/WebSocketManager.swift" 300
check "WebSocketManager contains connection management" "grep -q 'ConnectionState' LyoApp/Core/Realtime/WebSocketManager.swift" "pass"
check "WebSocketManager contains auto-reconnection" "grep -q 'reconnect\|Reconnect' LyoApp/Core/Realtime/WebSocketManager.swift" "pass"
check "WebSocketManager contains heartbeat" "grep -q 'heartbeat\|ping' LyoApp/Core/Realtime/WebSocketManager.swift" "pass"
check "WebSocketManager contains message handling" "grep -q 'WebSocketMessage' LyoApp/Core/Realtime/WebSocketManager.swift" "pass"

# Chat Manager
check_file "ChatManager.swift exists with substantial content" "LyoApp/Core/Realtime/ChatManager.swift" 400
check "ChatManager contains room management" "grep -q 'ChatRoom\|joinRoom' LyoApp/Core/Realtime/ChatManager.swift" "pass"
check "ChatManager contains message types" "grep -q 'MessageContent' LyoApp/Core/Realtime/ChatManager.swift" "pass"
check "ChatManager contains typing indicators" "grep -q 'typing\|Typing' LyoApp/Core/Realtime/ChatManager.swift" "pass"
check "ChatManager contains presence management" "grep -q 'presence\|online' LyoApp/Core/Realtime/ChatManager.swift" "pass"

echo ""
echo "üìà MACHINE LEARNING ANALYTICS VALIDATION"
echo "========================================"

# Learning Analytics Engine
check_file "LearningAnalyticsEngine.swift exists with substantial content" "LyoApp/Core/Analytics/LearningAnalyticsEngine.swift" 400
check "Analytics contains ML models" "grep -q 'MLModel' LyoApp/Core/Analytics/LearningAnalyticsEngine.swift" "pass"
check "Analytics contains performance metrics" "grep -q 'PerformanceMetrics' LyoApp/Core/Analytics/LearningAnalyticsEngine.swift" "pass"
check "Analytics contains learning insights" "grep -q 'LearningInsight' LyoApp/Core/Analytics/LearningAnalyticsEngine.swift" "pass"
check "Analytics contains recommendations" "grep -q 'LearningRecommendation' LyoApp/Core/Analytics/LearningAnalyticsEngine.swift" "pass"
check "Analytics contains pattern analysis" "grep -q 'LearningPattern' LyoApp/Core/Analytics/LearningAnalyticsEngine.swift" "pass"

echo ""
echo "üîß TECHNICAL ARCHITECTURE VALIDATION"
echo "===================================="

# Architecture checks
check "Uses Combine framework" "grep -rq 'import Combine' LyoApp/Core/Media/ LyoApp/Core/Realtime/ LyoApp/Core/Analytics/" "pass"
check "Uses Foundation framework" "grep -rq 'import Foundation' LyoApp/Core/Media/ LyoApp/Core/Realtime/ LyoApp/Core/Analytics/" "pass"
check "Contains ObservableObject classes" "grep -rq 'ObservableObject' LyoApp/Core/Media/ LyoApp/Core/Realtime/ LyoApp/Core/Analytics/" "pass"
check "Contains Published properties" "grep -rq '@Published' LyoApp/Core/Media/ LyoApp/Core/Realtime/ LyoApp/Core/Analytics/" "pass"
check "Uses async/await" "grep -rq 'async\|await' LyoApp/Core/Media/ LyoApp/Core/Realtime/ LyoApp/Core/Analytics/" "pass"

echo ""
echo "üìä CODE QUALITY VALIDATION"
echo "=========================="

# Code quality checks
check "Error handling implemented" "grep -rq 'Error\|throw\|catch' LyoApp/Core/Media/ LyoApp/Core/Realtime/ LyoApp/Core/Analytics/" "pass"
check "Proper documentation" "grep -rq '// MARK:\|/// ' LyoApp/Core/Media/ LyoApp/Core/Realtime/ LyoApp/Core/Analytics/" "pass"
check "Clean code structure" "grep -rq 'public\|private\|internal' LyoApp/Core/Media/ LyoApp/Core/Realtime/ LyoApp/Core/Analytics/" "pass"
check "Protocol-oriented design" "grep -rq 'protocol\|Protocol' LyoApp/Core/Media/ LyoApp/Core/Realtime/ LyoApp/Core/Analytics/" "pass"

echo ""
echo "üéØ FEATURE COMPLETENESS VALIDATION"
echo "=================================="

# Feature completeness
check "Video streaming features complete" "grep -rq 'play\|pause\|seek\|quality' LyoApp/Core/Media/" "pass"
check "Offline download features complete" "grep -rq 'download\|offline\|cache' LyoApp/Core/Media/" "pass"
check "Real-time chat features complete" "grep -rq 'message\|chat\|room' LyoApp/Core/Realtime/" "pass"
check "Analytics features complete" "grep -rq 'analyze\|insight\|metric' LyoApp/Core/Analytics/" "pass"

echo ""
echo "üìÑ DOCUMENTATION VALIDATION"
echo "==========================="

# Documentation checks
check_file "Phase 3C completion report exists" "PHASE_3C_COMPLETION_FINAL.md" 50
check "Completion report contains implementation details" "grep -q 'IMPLEMENTATION' PHASE_3C_COMPLETION_FINAL.md" "pass"
check "Completion report contains feature descriptions" "grep -q 'FEATURES' PHASE_3C_COMPLETION_FINAL.md" "pass"
check "Completion report contains code statistics" "grep -q 'lines of code\|Statistics' PHASE_3C_COMPLETION_FINAL.md" "pass"

echo ""
echo "üì± INTEGRATION READINESS VALIDATION"
echo "==================================="

# Integration readiness
check "SwiftUI compatible (uses @MainActor)" "grep -rq '@MainActor' LyoApp/Core/Media/ LyoApp/Core/Realtime/ LyoApp/Core/Analytics/" "pass"
check "Core Data integration ready" "grep -rq 'CoreData\|CoreDataStack' LyoApp/Core/Analytics/" "pass"
check "Network layer integration" "grep -rq 'URLSession\|Network' LyoApp/Core/Media/ LyoApp/Core/Realtime/" "pass"

echo ""
echo "üîç FILE SIZE AND COMPLEXITY VALIDATION"
echo "======================================"

# File size validation (ensuring substantial implementation)
for file in "LyoApp/Core/Media/VideoStreamManager.swift" "LyoApp/Core/Media/OfflineContentManager.swift" "LyoApp/Core/Media/MediaCacheManager.swift" "LyoApp/Core/Realtime/WebSocketManager.swift" "LyoApp/Core/Realtime/ChatManager.swift" "LyoApp/Core/Analytics/LearningAnalyticsEngine.swift"; do
    if [ -f "$file" ]; then
        size=$(wc -c < "$file")
        if [ "$size" -ge 10000 ]; then  # At least 10KB
            echo "‚úÖ $(basename "$file") has substantial content (${size} bytes)"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
        else
            echo "‚ùå $(basename "$file") seems too small (${size} bytes)"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
        fi
        TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    fi
done

echo ""
echo "üìà FINAL RESULTS"
echo "==============="
echo "Total Checks: $TOTAL_CHECKS"
echo "Passed: $PASSED_CHECKS"
echo "Failed: $FAILED_CHECKS"

# Calculate success rate
if [ "$TOTAL_CHECKS" -gt 0 ]; then
    SUCCESS_RATE=$(( (PASSED_CHECKS * 100) / TOTAL_CHECKS ))
    echo "Success Rate: ${SUCCESS_RATE}%"
    
    if [ "$SUCCESS_RATE" -ge 90 ]; then
        echo ""
        echo "üéâ PHASE 3C VALIDATION: EXCELLENT SUCCESS!"
        echo "‚úÖ Advanced Features Integration is ready for production"
        echo "‚úÖ All critical features implemented successfully"
        echo "‚úÖ Code quality meets high standards"
        echo "‚úÖ Ready to proceed to Phase 4: Backend Integration"
    elif [ "$SUCCESS_RATE" -ge 80 ]; then
        echo ""
        echo "‚úÖ PHASE 3C VALIDATION: GOOD SUCCESS!"
        echo "‚úÖ Advanced Features Integration is mostly complete"
        echo "‚ö†Ô∏è  Some minor issues need attention"
        echo "‚úÖ Ready to proceed with minor fixes"
    elif [ "$SUCCESS_RATE" -ge 70 ]; then
        echo ""
        echo "‚ö†Ô∏è  PHASE 3C VALIDATION: MODERATE SUCCESS"
        echo "‚úÖ Core functionality implemented"
        echo "‚ö†Ô∏è  Several issues need attention before proceeding"
        echo "üîß Recommend fixing issues before next phase"
    else
        echo ""
        echo "‚ùå PHASE 3C VALIDATION: NEEDS IMPROVEMENT"
        echo "‚ùå Critical issues found"
        echo "üîß Must address issues before proceeding"
    fi
else
    echo "‚ùå No checks could be performed"
fi

echo ""
echo "üöÄ Phase 3C Advanced Features Integration Validation Complete!"
echo "Next: Phase 4 - Backend Integration"
